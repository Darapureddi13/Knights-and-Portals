from collections import deque

def find_shortest_path(grid):
   
    
    if not grid or grid[0][0] == 1 or grid[-1][-1] == 1:
        return -1
    
    total_rows = len(grid)
    total_cols = len(grid[0])

    def calculate_distances(start_row, start_col):
        distances = [[-1 for _ in range(total_cols)] for _ in range(total_rows)]
        queue = deque()
        queue.append((start_row, start_col))
        distances[start_row][start_col] = 0 
        move_directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        while queue:
            current_row, current_col = queue.popleft()
            
            for row_change, col_change in move_directions:
                new_row = current_row + row_change
                new_col = current_col + col_change
                
                if 0 <= new_row < total_rows and 0 <= new_col < total_cols:
                    if grid[new_row][new_col] == 0 and distances[new_row][new_col] == -1:
                        distances[new_row][new_col] = distances[current_row][current_col] + 1
                        queue.append((new_row, new_col))
        
        return distances
    
    distances_from_start = calculate_distances(0, 0)
    distances_from_end = calculate_distances(total_rows - 1, total_cols - 1)
    
    path_without_teleport = distances_from_start[total_rows - 1][total_cols - 1]
    
    empty_cells = []
    for row in range(total_rows):
        for col in range(total_cols):
            if grid[row][col] == 0:
                empty_cells.append((row, col))
    
    shortest_with_teleport = float('inf')
    
    for teleport_from in empty_cells:
        from_row, from_col = teleport_from
        
        if distances_from_start[from_row][from_col] == -1:
            continue
        
        for teleport_to in empty_cells:
            to_row, to_col = teleport_to
            
            if distances_from_end[to_row][to_col] == -1:
                continue
            
            path_length = (distances_from_start[from_row][from_col] + 
                          1 +  
                          distances_from_end[to_row][to_col])
            
            if path_length < shortest_with_teleport:
                shortest_with_teleport = path_length
    
    if path_without_teleport == -1 and shortest_with_teleport == float('inf'):
        return -1 
    elif path_without_teleport == -1:
        return shortest_with_teleport 
    elif shortest_with_teleport == float('inf'):
        return path_without_teleport 
    else:
        return min(path_without_teleport, shortest_with_teleport)  
        
        
# Test cases
if __name__ == "__main__":
    # Test 1: Simple 3x3 grid with no obstacles
    test_grid1 = [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]
    ]
    print("Test 1 (Open grid):", find_shortest_path(test_grid1))  # Expected: 4
    
    # Test 2: Teleport helps avoid obstacles
    test_grid2 = [
        [0, 1, 0],
        [1, 1, 0],
        [0, 0, 0]
    ]
    print("Test 2 (Teleport helps):", find_shortest_path(test_grid2))  # Expected: 4
    
    # Test 3: Teleport required to reach end
    test_grid3 = [
        [0, 1, 0],
        [1, 1, 1],
        [0, 1, 0]
    ]
    print("Test 3 (Teleport required):", find_shortest_path(test_grid3))  # Expected: 6
    
    # Test 4: Completely blocked path
    test_grid4 = [
        [0, 1, 1],
        [1, 1, 1],
        [1, 1, 0]
    ]
    print("Test 4 (Blocked):", find_shortest_path(test_grid4))  # Expected: -1
    
    # Test 5: Large open grid
    test_grid5 = [[0]*10 for _ in range(10)]
    print("Test 5 (Large grid):", find_shortest_path(test_grid5))  # Expected: 18
